export interface Frontmatter {
  pubDate: string;
  author: string;
  title: string;
  description: string;
  image: {
    url: string;
    alt: string;
  };
  tags: string[];
}

export interface ParsedMarkdown {
  frontmatter: Frontmatter;
  content: string;
}

export function parseMarkdownWithFrontmatter(markdown: string): ParsedMarkdown {
  const frontmatterRegex = /^---\n([\s\S]*?)\n---\n([\s\S]*)$/;
  const match = markdown.match(frontmatterRegex);

  if (!match) {
    // No frontmatter found, return default structure
    return {
      frontmatter: {
        pubDate: new Date().toISOString().split('T')[0],
        author: 'AI Assistant',
        title: 'Untitled Blog',
        description: 'A blog post generated by AI.',
        image: {
          url: 'https://images.unsplash.com/photo-1499750310107-5fef28a66643?w=1280&h=720&fit=crop',
          alt: 'Blog post image'
        },
        tags: []
      },
      content: markdown
    };
  }

  const frontmatterText = match[1];
  const content = match[2];

  // Parse YAML frontmatter
  const frontmatter: Frontmatter = {
    pubDate: new Date().toISOString().split('T')[0],
    author: 'AI Assistant',
    title: 'Untitled Blog',
    description: 'A blog post generated by AI.',
    image: {
      url: 'https://images.unsplash.com/photo-1499750310107-5fef28a66643?w=1280&h=720&fit=crop',
      alt: 'Blog post image'
    },
    tags: []
  };

  // Simple YAML parsing for our specific use case
  const lines = frontmatterText.split('\n');
  for (const line of lines) {
    const colonIndex = line.indexOf(':');
    if (colonIndex === -1) continue;

    const key = line.substring(0, colonIndex).trim();
    const value = line.substring(colonIndex + 1).trim();

    switch (key) {
      case 'pubDate':
        frontmatter.pubDate = value;
        break;
      case 'author':
        frontmatter.author = value;
        break;
      case 'title':
        frontmatter.title = value;
        break;
      case 'description':
        frontmatter.description = value;
        break;
      case 'tags':
        // Handle array format: tags: ["tag1", "tag2"]
        const tagsMatch = value.match(/\[(.*)\]/);
        if (tagsMatch) {
          frontmatter.tags = tagsMatch[1]
            .split(',')
            .map(tag => tag.trim().replace(/"/g, ''))
            .filter(tag => tag.length > 0);
        }
        break;
    }
  }

  // Handle image object
  const imageMatch = frontmatterText.match(/image:\s*\n\s*url:\s*"([^"]+)"\s*\n\s*alt:\s*"([^"]+)"/);
  if (imageMatch) {
    frontmatter.image.url = imageMatch[1];
    frontmatter.image.alt = imageMatch[2];
  }

  return {
    frontmatter,
    content
  };
} 